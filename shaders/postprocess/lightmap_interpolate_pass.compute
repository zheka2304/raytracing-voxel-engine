#version 310 es

#define WORK_GROUP_SIZE ${common.texture_work_group_size}

layout(local_size_x = WORK_GROUP_SIZE, local_size_y = WORK_GROUP_SIZE, local_size_z = 1) in;
layout(std430) buffer;

layout(rgba32f, binding = ${lightmap.interpolation_frame_last}) uniform highp image2D lightmap_last_frame;
layout(rgba32f, binding = ${lightmap.interpolation_frame_current}) uniform highp image2D lightmap_current_frame;
layout(rgba32f, binding = ${lightmap.blur_frame_current}) uniform highp image2D blur_current_frame;


#include "common.inc"
#include "raytrace/camera.inc"
#include "buffer/spatial_buffer.inc"


vec4 getLastFrameBlurredValue(ivec2 origin_pos, vec4 origin, float factor, int step) {
    float weight = 0.0;
    vec3 value = vec3(0.0);
    for (int x = -1; x <= 1; x++) {
        for (int y = -1; y <= 1; y++) {
            if (x == 0 && y == 0) continue;
            ivec2 pixel_pos = clamp(origin_pos + ivec2(x, y) * step, ivec2(0), U_SCREEN_SIZE - 1);
//            float stability = ACCESS_SPATIAL_BUFFER(pixel_pos).value.w;
            vec4 pixel = imageLoad(lightmap_last_frame, pixel_pos);
            vec3 v = pixel.rgb;
            float w = factor; // * stability;
            w -= getLightPointDifferenceDelta(pixel.a, origin.a) / float(${lighting.blur_depth_factor});
            w = clamp(w, 0.0, 1.0);
            weight += w;
            value += w * v;
        }
    }
    return vec4(value, weight);
}

vec3 getLastFrameBlurredValueMultiSample(ivec2 pixel, float factor, int sample_count) {
    vec4 origin = imageLoad(lightmap_last_frame, pixel);
    if (factor < .1 || sample_count <= 0) {
        return origin.xyz;
    }
    vec4 value_and_weight = vec4(0.0);
    for (int i = 0; i < sample_count; i++) {
        vec4 s = getLastFrameBlurredValue(pixel, origin, factor, i * 2 + 1);
        value_and_weight += s / float(sample_count);
    }
    return value_and_weight.w > 0.0 ? value_and_weight.xyz / value_and_weight.w : origin.xyz;
}

void main() {
    // get pixel and discard excess ones
    ivec2 image_size = imageSize(lightmap_current_frame);
    ivec2 pixel = ivec2(gl_GlobalInvocationID.xy);
    if (pixel.x >= image_size.x || pixel.y >= image_size.y) {
        return;
    }

    // get spatial buffer data
    SpatialBufferData spatial_buffer_data = ACCESS_SPATIAL_BUFFER(pixel);

    // get blend factor
    float blend_factor = clamp(1.0 - spatial_buffer_data.value.w * float(${lighting.interpolate_blend_rate_factor}), float(${lighting.interpolate_blend_rate_min}), 1.0);
    if (spatial_buffer_data.pixel.x >= 0) blend_factor = float(${lighting.interpolate_blend_rate_min});

    // get last and current value according to spatial buffer data
    float blur_factor = clamp(1.0 - spatial_buffer_data.value.w * float(${lighting.interpolate_blur_rate_factor}), 0.0, 1.0);
    vec3 last_value = getLastFrameBlurredValueMultiSample(spatial_buffer_data.pixel.xy, blur_factor, int(${lighting.interpolate_blur_sample_count}));
    vec4 current_value = imageLoad(lightmap_current_frame, pixel);

    // mix previous and current value
    current_value.rgb = mix(last_value, current_value.rgb, blend_factor);

    // write current value to current blur and interpolation textures
    imageStore(lightmap_current_frame, pixel, current_value);
    imageStore(blur_current_frame, pixel, vec4(
        PACK_H2F(vec2(current_value.r)),
        PACK_H2F(vec2(current_value.g)),
        PACK_H2F(vec2(current_value.b)),
        current_value.a
    ));
}