#version 310 es

#define WORK_GROUP_SIZE ${common.texture_work_group_size}

layout(local_size_x = WORK_GROUP_SIZE, local_size_y = WORK_GROUP_SIZE, local_size_z = 1) in;
layout(std430) buffer;

layout(rgba32f, binding = ${lightmap.last_frame}) uniform highp image2D lightmap_last_frame;
layout(rgba32f, binding = ${lightmap.current_frame}) uniform highp image2D lightmap_current_frame;
layout(rgba32f, binding = ${lightmap.blur_pass_texture}) uniform highp image2D blur_pass_texture;
layout(rgba32f, binding = ${common.spatial_buffer}) uniform highp image2D spatial_buffer_texture;


#include "common.inc"


void main() {
    // get pixel and discard excess ones
    ivec2 image_size = imageSize(lightmap_current_frame);
    ivec2 pixel = ivec2(gl_GlobalInvocationID.xy);
    if (pixel.x >= image_size.x || pixel.y >= image_size.y) {
        return;
    }

    //
    vec4 spatial_buffer = imageLoad(spatial_buffer_texture, pixel);

    //
    vec4 last_value = imageLoad(lightmap_last_frame, ivec2(spatial_buffer.xy));
    vec4 current_value = imageLoad(lightmap_current_frame, pixel);
    float blend_value = max(0.05, 1.0 - spatial_buffer.w);
    current_value.r = mix(last_value.r, current_value.r, blend_value);
    imageStore(lightmap_current_frame, pixel, current_value);

    //
    imageStore(blur_pass_texture, pixel, vec4(
        current_value.r,                                               // light value
        current_value.a,                                               // distance from camera
        current_value.g,                                               // packed normal dot values
        0.0                                                            // reserved for passes
    ));
}