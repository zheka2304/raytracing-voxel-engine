#version 310 es

#define WORK_GROUP_SIZE ${common.texture_work_group_size}

layout(local_size_x = WORK_GROUP_SIZE, local_size_y = WORK_GROUP_SIZE, local_size_z = 1) in;
layout(std430) buffer;

#include "util.inc"
#include "time-compute.inc"
#include "raytrace/camera.inc"
#include "raytrace/debug.inc"
#include "raytrace/raycast.inc"
#include "raytrace/blending.inc"
#include "raytrace/lighting.inc"

// Color parameters of the pixel:
// - r, g, b - each component stores a color pair (using packColorPairF): without shadow and with shadow (normal shading is applied)
// - a: ??
layout(rgba32f, binding = ${raytrace.color_texture}) writeonly uniform highp image2D output_texture_color;
// Light parameters of the pixel:
// - r: light value (only shadows)
// - g: packed normal
// - b: ray count
// - a: distance to camera
layout(rgba32f, binding = ${raytrace.light_texture}) writeonly uniform highp image2D output_texture_light;
// Depth & detail parameters of the pixel
layout(rgba32f, binding = ${raytrace.depth_texture}) writeonly uniform highp image2D output_texture_depth;

//
layout(rgba32f, binding = ${common.spatial_buffer_current_frame}) uniform highp image2D spatial_buffer_current_frame;
layout(rgba32f, binding = ${common.spatial_buffer}) uniform highp image2D spatial_buffer_texture;


void raytraceMainImage(
    out vec4 o_color,
    out vec4 o_light,
    out vec4 o_depth,
    out vec4 o_spatial_buffer,
    Ray ray,
    int light_rays_count
) {
    vec4 pure_color = vec4(1.0);
    vec4 shaded_color = pure_color;

    // initialize occluding object distance as POSITIVE_INF, because we didnt hit anything yet
    o_light.r = 1.0;

    // setup default packed normal value
    o_light.g = PACK_H2F(vec2(0.0));

    RaycastResult result = raycastVoxelWorld(ray, 50, 6, true);
    for (int i = result.count - 1; i >= 0; i--) {
        RaycastResultSpan span = getRaycastResultSpan(result, i);
        vec3 span_start_position = getRaycastSpanStart(ray, span);

        // unpack voxel data
        uint voxel = span.mat.x;
        vec3 color = vec3(voxel & 0xFFu, (voxel >> 8u) & 0xFFu, (voxel >> 16u) & 0xFFu) / 255.0;
        float alpha = float((voxel >> 25u) & 31u) / 31.0;

        // voxel side hash
        uint voxel_side_hash = getVoxelPositionHash(span_start_position, span.mat.z);
        o_spatial_buffer.w = uintBitsToFloat(voxel_side_hash);
        o_depth.r = float(voxel_side_hash) * (1.0 / float(0xffffffffu));

        // skylight normal shading
        LightSource sky_light_source = getSkyLightSource();
        float normal_shading = dot(-normalize(sky_light_source.light_direction), getVoxelNormal(span.mat, span.span));
        normal_shading = normal_shading * .4 + .6;

        // skylight shadow
        float skylight_shadow_value = getShadowValueFromLightSource(sky_light_source, span_start_position, span, light_rays_count);

        // get normal and pack it for soft shadow post processor
        vec3 normal = getVoxelNormalForSoftShadows(span.mat, span.span);
        float packed_normal = PACK_H2F(vec2(dot(normal, vec3(1.0, 0.0, 0.0)), dot(normal, vec3(0.0, 1.0, 0.0))));

        // do blending
        pure_color = blendVoxelColors(
            pure_color,
            vec4(color * normal_shading, alpha),
            span.mat,
            ray.ray,
            span.span.y - span.span.x
        );

        shaded_color = blendVoxelColors(
            shaded_color,
            vec4(color * 0.3 * (normal_shading * 0.5 + 0.5), alpha),
            span.mat,
            ray.ray,
            span.span.y - span.span.x
        );

        // light value
        o_light.r = skylight_shadow_value;

        // packed normal
        o_light.g = packed_normal;
    }

    // distance from camera value
    o_light.a = result.distance;

    if (result.distance < POSITIVE_INF) {
        o_spatial_buffer.xyz = ray.start + ray.ray * result.distance;
    } else {
        o_spatial_buffer.xyz = ray.start + ray.ray * 100.0;
    }

    o_color.rgb = packColorPairF(pure_color.rgb, shaded_color.rgb);
}

void main() {
    // get pixel and discard excess ones
    ivec2 image_size = imageSize(output_texture_color);
    ivec2 pixel = ivec2(gl_GlobalInvocationID.xy);
    if (pixel.x >= image_size.x || pixel.y >= image_size.y) {
        return;
    }

    // load stability value from spatial buffer
    vec4 spatial_buffer_value = imageLoad(spatial_buffer_texture, pixel);
    
    // calculate light ray count
    float light_rays_count_f = 1.0; //pow(1.0 - spatial_buffer_value.w, 2.0) * 2.0 + 1.0;
    int light_rays_count = int(light_rays_count_f);

    // screen position in range of [-1, 1)
    vec2 screen_position = (vec2(pixel) + .5) / vec2(image_size) * 2.0 - 1.0;

    //
    Ray ray = getCameraRay(screen_position);

    vec4 o_color;
    vec4 o_light;
    vec4 o_depth;
    vec4 o_spatial_buffer;
    raytraceMainImage(o_color, o_light, o_depth, o_spatial_buffer, ray, light_rays_count);

    // pass ray count to light data
    o_light.b = light_rays_count_f;

    // -- DEBUG --
    o_color.b = 1.0 - spatial_buffer_value.w;
    o_color.rg = abs(UNPACK_H2F(spatial_buffer_value.z));
    // -- DEBUG END --


    imageStore(spatial_buffer_current_frame, pixel, o_spatial_buffer);
    imageStore(output_texture_color, pixel, vec4(o_color.rgb, 1.0));
    imageStore(output_texture_light, pixel, o_light);
    imageStore(output_texture_depth, pixel, o_depth);
}