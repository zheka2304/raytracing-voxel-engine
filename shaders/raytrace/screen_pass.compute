#version 310 es

#define WORK_GROUP_SIZE ${raytrace.screen_pass_work_group_size}

layout(local_size_x = WORK_GROUP_SIZE, local_size_y = WORK_GROUP_SIZE, local_size_z = 1) in;
layout(std430) buffer;


#include "raytrace/camera.inc"
#include "raytrace/debug.inc"
#include "raytrace/raycast.inc"


layout(rgba32f, binding = ${raytrace.color_texture}) writeonly uniform highp image2D output_texture_color;
layout(rgba32f, binding = ${raytrace.light_texture}) writeonly uniform highp image2D output_texture_light;
layout(rgba32f, binding = ${raytrace.depth_texture}) writeonly uniform highp image2D output_texture_depth;



void main() {
    // get pixel and discard excess ones
    ivec2 image_size = imageSize(output_texture_color);
    ivec2 pixel = ivec2(gl_GlobalInvocationID.xy);
    if (pixel.x >= image_size.x || pixel.y >= image_size.y) {
        return;
    }

    // screen position in range of [-1, 1)
    vec2 screen_position = vec2(pixel) / vec2(image_size) * 2.0 - 1.0;

    //
    RaycastResult result = raycastVoxelWorld(getCameraRay(screen_position), 50, true);
    vec4 mixed_color = vec4(0.0);
    for (int i = result.count - 1; i >= 0; i--) {
        RaycastResultSpan span = getRaycastResultSpan(result, i);
        uint voxel = span.mat.x;
        vec3 color = vec3(voxel & 0xFFu, (voxel >> 8u) & 0xFFu, (voxel >> 16u) & 0xFFu) / 255.0;
        float alpha = float((voxel >> 25u) & 31u) / 31.0;
        if (alpha < 1.0) alpha = 1.0 - pow(1.0 - alpha, (span.span.y - span.span.x) / 0.5);
        float f = dot(getVoxelNormalFromMaterial(span.mat.y), normalize(vec3(1.0, 0.5, 2.0))) * 0.4 + 0.6;
        mixed_color = mix(vec4(mixed_color.rgb, 1.0), vec4(color * f, alpha), alpha);
    }

    // return vec3(1.0, 0.0, 1.0) * float(result.steps) / 256.0;

    imageStore(output_texture_color, pixel, vec4(mixed_color.rgb, 1.0));
    imageStore(output_texture_light, pixel, vec4(1.0));
    imageStore(output_texture_depth, pixel, vec4(vec3(0.0), 1.0));
}