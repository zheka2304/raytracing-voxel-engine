#version 310 es

#define WORK_GROUP_SIZE ${raytrace.screen_pass_work_group_size}

layout(local_size_x = WORK_GROUP_SIZE, local_size_y = WORK_GROUP_SIZE, local_size_z = 1) in;
layout(std430) buffer;


#include "raytrace/camera.inc"
#include "raytrace/debug.inc"


layout(rgba32f, binding = ${raytrace.color_texture}) writeonly uniform highp image2D output_texture_color;
layout(rgba32f, binding = ${raytrace.light_texture}) writeonly uniform highp image2D output_texture_light;
layout(rgba32f, binding = ${raytrace.depth_texture}) writeonly uniform highp image2D output_texture_depth;



void main() {
    // get pixel and discard excess ones
    ivec2 image_size = imageSize(output_texture_color);
    ivec2 pixel = ivec2(gl_GlobalInvocationID.xy);
    if (pixel.x >= image_size.x || pixel.y >= image_size.y) {
        return;
    }

    // screen position in range of [-1, 1)
    vec2 screen_position = vec2(pixel) / vec2(image_size) * 2.0 - 1.0;

    imageStore(output_texture_color, pixel, vec4(raycast_debug(Ray(
        vec3(0.0, 1.0, 0.0),
        vec3(screen_position, 1.0),
        0.0
    )), 1.0));
    imageStore(output_texture_light, pixel, vec4(1.0));
    imageStore(output_texture_depth, pixel, vec4(vec3(0.0), 1.0));
}