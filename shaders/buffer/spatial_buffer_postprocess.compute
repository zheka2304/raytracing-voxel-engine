#version 310 es

#define WORK_GROUP_SIZE ${common.texture_work_group_size}

layout(local_size_x = WORK_GROUP_SIZE, local_size_y = WORK_GROUP_SIZE, local_size_z = 1) in;
layout(std430) buffer;

layout(rgba32f, binding = ${common.spatial_buffer}) uniform highp image2D spatial_buffer_texture;


#include "common.inc"


void main() {
    // get pixel and discard excess ones
    ivec2 image_size = imageSize(spatial_buffer_texture);
    ivec2 pixel_pos = ivec2(gl_GlobalInvocationID.xy);
    if (pixel_pos.x >= image_size.x || pixel_pos.y >= image_size.y) {
        return;
    }

    vec4 spatial_buffer_data = imageLoad(spatial_buffer_texture, pixel_pos);
    if (spatial_buffer_data.x < 0.0) {
        ivec2 positions_to_check[5] = ivec2[5](
            ivec2(-1, 0),
            ivec2(0, 1),
            ivec2(0, -1),
            ivec2(1, 0),
            ivec2(1, 1)
        );

        for (int i = 0; i < 5; i++) {
            ivec2 pos = positions_to_check[i];
            vec4 data = imageLoad(spatial_buffer_texture, pos + pixel_pos);
            if (data.x >= 0.0) {
                spatial_buffer_data = data;// - vec4(pos, 0.0, 0.0);
                break;
            }
        }

        if (spatial_buffer_data.x < 0.0) {
            spatial_buffer_data.w = 0.0;
        }
        imageStore(spatial_buffer_texture, pixel_pos, spatial_buffer_data);
    }
}