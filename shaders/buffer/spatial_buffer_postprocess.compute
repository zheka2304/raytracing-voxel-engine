#version 310 es

#define WORK_GROUP_SIZE ${common.texture_work_group_size}

layout(local_size_x = WORK_GROUP_SIZE, local_size_y = WORK_GROUP_SIZE, local_size_z = 1) in;
layout(std430) buffer;


#include "common.inc"
#include "buffer/spatial_buffer.inc"


void main() {
    // get pixel and discard excess ones
    ivec2 pixel_pos = ivec2(gl_GlobalInvocationID.xy);
    if (pixel_pos.x >= U_SCREEN_SIZE.x || pixel_pos.y >= U_SCREEN_SIZE.y) {
        return;
    }

    SpatialBufferData spatial_buffer_data = spatial_buffer.data[getSpatialBufferIndex(pixel_pos)];
    int priority = spatial_buffer_data.pixel.w;
    if (priority == 0) {
        spatial_buffer_data.value = vec4(0.0);
        ACCESS_SPATIAL_BUFFER(pixel_pos) = spatial_buffer_data;
    } else {
        vec2 new_pixel_pos_f = vec2(pixel_pos) + 0.5;
        new_pixel_pos_f += spatial_buffer_data.value.xy;
        ivec2 new_pixel_pos = ivec2(new_pixel_pos_f);
        if (new_pixel_pos != pixel_pos) {
            vec2 new_pixel_error = new_pixel_pos_f - (vec2(new_pixel_pos) + .5);
            if (ACCESS_SPATIAL_BUFFER(new_pixel_pos).pixel.w > 0) {
                spatial_buffer_data.value.xy = new_pixel_error;
                ACCESS_SPATIAL_BUFFER(new_pixel_pos) = spatial_buffer_data;
            }
        }
    }
}