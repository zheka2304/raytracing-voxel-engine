#version 310 es

layout(local_size_x = 1024, local_size_y = 1, local_size_z = 1) in;
layout(std430) buffer;

precision highp float;
precision highp int;

//

#define LIGHT_REFLECTION_COUNT 4

//

layout(binding = 12) buffer LightBuffer {
    uint data[];
} light_buffer;

layout(binding = 13) buffer LightPassInputBuffer {
    // level of reflection to calculate - 1
    // for one pass this level data will be iterated to emit light, so to calculate level 4 reflection, 3 should be passed
    // when calculating first level of reflection, instead of passing -1, shader with INITIAL_PASS defined must be used
    int level;

    // all offsets must be multiplied by LIGHT_REFLECTION_COUNT

    ivec3 chunk_position_offset; // offset of the current chunk
    int chunk_buffer_offset;     // offset of processed span
    int stride;                  // stride of positions in buffer to be processed

    ivec3 chunk_region_offset;   // chunk region offset
    ivec3 chunk_region_size;     // chunk region size
    int buffer_offsets[];        // chunk offsets by chunk position
} input_buffer;


//

void main() {
    light_buffer.data[input_buffer.chunk_buffer_offset + gl_GlobalInvocationID.x] = 0xFFAAFF;
}